{"ast":null,"code":"var _jsxFileName = \"/home/drigger/Documents/Project/alumniESD/main/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport loginService from './services/login';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NavBar from './components/NavBar';\nimport Home from './services/Home';\nimport AddUser from './services/AddUser';\nimport EditUser from './services/EditUSer';\nimport ViewUser from './services/ViewUser';\nimport ViewOrg from './services/ViewOrg';\nimport CompHR from './services/CompHR';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [user, setUser] = useState(null);\n\n  // Will store the bills of the logged in user\n  const [bills, setBills] = useState([]);\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message);\n    setNotificationType(type);\n    setTimeout(() => {\n      setNotificationType(null);\n      setNotification(null);\n    }, 3000);\n  };\n\n  // Function that handles login of users\n  const handleLogin = async credentials => {\n    try {\n      const userObject = await loginService.login(credentials);\n      setUser(userObject);\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject));\n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success');\n      setBills([]);\n    } catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error');\n    }\n  };\n  var u = user.firstName;\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser');\n    if (loggedInUser) setUser(JSON.parse(loggedInUser));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      notification: notification,\n      type: notificationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /* Show Login form when no login has happened */\n    user === null && /*#__PURE__*/_jsxDEV(LoginForm, {\n      startLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /* Show NavBar when login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(NavBar, {\n      user: user,\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), user !== null && /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {\n            id: u\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/adduser\",\n          element: /*#__PURE__*/_jsxDEV(AddUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/vieworg\",\n          element: /*#__PURE__*/_jsxDEV(ViewOrg, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/orghr/:id\",\n          element: /*#__PURE__*/_jsxDEV(CompHR, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/edituser/:id\",\n          element: /*#__PURE__*/_jsxDEV(EditUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/viewuser/:id\",\n          element: /*#__PURE__*/_jsxDEV(ViewUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"UxiILeMdfq0olK5HrkyyrWCITHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","loginService","BrowserRouter","Router","Routes","Route","useNavigate","Notification","LoginForm","NavBar","Home","AddUser","EditUser","ViewUser","ViewOrg","CompHR","App","user","setUser","bills","setBills","notification","setNotification","notificationType","setNotificationType","notificationHandler","message","type","setTimeout","handleLogin","credentials","userObject","login","window","localStorage","setItem","JSON","stringify","firstName","exception","u","loggedInUser","getItem","parse"],"sources":["/home/drigger/Documents/Project/alumniESD/main/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport loginService from './services/login'\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NavBar from './components/NavBar'\nimport Home from './services/Home'\nimport AddUser from './services/AddUser';\nimport EditUser from './services/EditUSer';\nimport ViewUser from './services/ViewUser';\nimport ViewOrg from './services/ViewOrg';\nimport CompHR from './services/CompHR';\n\nconst App = () => {\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [ user, setUser ] = useState(null)\n\n  // Will store the bills of the logged in user\n  const [ bills, setBills ] = useState([])\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState(null)\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message)\n    setNotificationType(type)\n\n    setTimeout(() => {\n      setNotificationType(null)\n      setNotification(null)\n    }, 3000)\n  }\n\n  // Function that handles login of users\n  const handleLogin = async (credentials) => {\n    try {\n      const userObject = await loginService.login(credentials)\n      setUser(userObject)\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject))\n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success')    \n      setBills([])\n      \n    }\n    catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error')\n    }\n  }\n  var u=user.firstName;\n\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser')\n    if (loggedInUser)\n      setUser(JSON.parse(loggedInUser))\n  }, [])\n\n  return (\n    <div>\n      {/* Header of the page */}\n      {/* <div className='text-left page-header p-2 regular-shadow '>\n          <div className='font-weight-bold'>\n            <h2>IIIT Bengluru Academic Portal </h2>\n          </div>\n      </div> */}\n      \n      {/* Notification component that will render only when the notification state is not null */}\n      <Notification notification={notification} type={notificationType} />\n\n      {\n        /* Show Login form when no login has happened */\n        user === null && \n        <LoginForm startLogin={handleLogin}/>\n      }\n\n      {\n        /* Show NavBar when login has happened */\n        user !== null && \n        <NavBar user={user} setUser={setUser}/>\n      } \n      \n      {\n      user!==null && \n        <Router>\n          <Routes>\n          <Route exact path=\"/\" element={<Home id={u} />} /> \n          <Route exact path=\"/adduser\" element={<AddUser />} />\n          <Route exact path=\"/vieworg\" element={<ViewOrg />} />\n          <Route exact path=\"/orghr/:id\" element={<CompHR />} />\n          <Route exact path=\"/edituser/:id\" element={<EditUser />} />\n          <Route exact path=\"/viewuser/:id\" element={<ViewUser />} />\n          </Routes>\n        </Router>\n      }\n\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}