{"ast":null,"code":"var _jsxFileName = \"/home/drigger/Documents/Project/alumniESD/ESD-Fullstack-Integration-master (1)/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport loginService from './services/login';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NavBar from './components/NavBar';\nimport Home from './services/Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [user, setUser] = useState(null);\n\n  // Will store the bills of the logged in user\n  const [bills, setBills] = useState([]);\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message);\n    setNotificationType(type);\n    setTimeout(() => {\n      setNotificationType(null);\n      setNotification(null);\n    }, 3000);\n  };\n\n  // Function that handles login of users\n  const handleLogin = async credentials => {\n    try {\n      const userObject = await loginService.login(credentials);\n      setUser(userObject);\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject));\n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success');\n      setBills([]);\n    } catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error');\n    }\n  };\n\n  // Function that pays a bill using the billObject that is passed to the function\n  // const payBill = async (billObject) => {\n  //   try {\n  //     // Call payBill() at the backend \n  //     await billService.payBill(billObject)\n\n  //     // On successful completion of the above method, iterate through all the bills and only retain those bills\n  //     // which don't have ID equal to the billObject's ID, i.e. the ID of the bill that's just been paid/deleted\n  //     setBills(bills.filter(bill => bill.billId !== billObject.billId))\n\n  //     notificationHandler(`Successfully paid the \"${billObject.description}\" bill`, 'success')\n  //   }\n  //   catch (exception) {\n  //     notificationHandler(`Failed to pay the \"${billObject.description}\" bill successfully`, 'error')\n  //   }\n  // }\n\n  // Effect Hook that fetches a user's bills\n  // If \"user\" state changes, then the new bills must be fetched.\n  // This is why \"user\" is part of the dependency array of this hook\n  // MIGHT HAVE TO CHANGE THIS LATER TO PROMISE CHAINING IF IT FAILS\n  // useEffect(() => {\n  //     async function fetchData() {\n  //       if (user) {\n  //         const bills = await billService.getUserBills(user)\n  //         setBills(bills)\n  //       }\n  //     }\n  //     fetchData()\n  // }, [user])\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser');\n    if (loggedInUser) setUser(JSON.parse(loggedInUser));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center page-header p-2 regular-text-shadow regular-shadow\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-4 font-weight-bold\",\n        children: \"Academia - Payments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notification: notification,\n      type: notificationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /* Show Login form when no login has happened */\n    user === null && /*#__PURE__*/_jsxDEV(LoginForm, {\n      startLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /* Show NavBar when login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(NavBar, {\n      user: user,\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this),\n    /*#__PURE__*/\n    /* Show Bills of the User when login has happened */\n    // user !== null &&\n    // <Home\n    // />\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [\"user !== null && \", /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/home\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/viewuser/:id\",\n            element: /*#__PURE__*/_jsxDEV(ViewUser, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"UxiILeMdfq0olK5HrkyyrWCITHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","loginService","BrowserRouter","Router","Routes","Route","Notification","LoginForm","NavBar","Home","App","user","setUser","bills","setBills","notification","setNotification","notificationType","setNotificationType","notificationHandler","message","type","setTimeout","handleLogin","credentials","userObject","login","window","localStorage","setItem","JSON","stringify","firstName","exception","loggedInUser","getItem","parse"],"sources":["/home/drigger/Documents/Project/alumniESD/ESD-Fullstack-Integration-master (1)/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport loginService from './services/login'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NavBar from './components/NavBar'\nimport Home from './services/Home'\n\nconst App = () => {\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [ user, setUser ] = useState(null)\n\n  // Will store the bills of the logged in user\n  const [ bills, setBills ] = useState([])\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState(null)\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message)\n    setNotificationType(type)\n\n    setTimeout(() => {\n      setNotificationType(null)\n      setNotification(null)\n    }, 3000)\n  }\n\n  // Function that handles login of users\n  const handleLogin = async (credentials) => {\n    try {\n      const userObject = await loginService.login(credentials)\n      setUser(userObject)\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject))\n      \n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success')\n      setBills([])\n    }\n    catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error')\n    }\n  }\n\n  // Function that pays a bill using the billObject that is passed to the function\n  // const payBill = async (billObject) => {\n  //   try {\n  //     // Call payBill() at the backend \n  //     await billService.payBill(billObject)\n\n  //     // On successful completion of the above method, iterate through all the bills and only retain those bills\n  //     // which don't have ID equal to the billObject's ID, i.e. the ID of the bill that's just been paid/deleted\n  //     setBills(bills.filter(bill => bill.billId !== billObject.billId))\n\n  //     notificationHandler(`Successfully paid the \"${billObject.description}\" bill`, 'success')\n  //   }\n  //   catch (exception) {\n  //     notificationHandler(`Failed to pay the \"${billObject.description}\" bill successfully`, 'error')\n  //   }\n  // }\n\n  \n  // Effect Hook that fetches a user's bills\n  // If \"user\" state changes, then the new bills must be fetched.\n  // This is why \"user\" is part of the dependency array of this hook\n  // MIGHT HAVE TO CHANGE THIS LATER TO PROMISE CHAINING IF IT FAILS\n  // useEffect(() => {\n  //     async function fetchData() {\n  //       if (user) {\n  //         const bills = await billService.getUserBills(user)\n  //         setBills(bills)\n  //       }\n  //     }\n  //     fetchData()\n  // }, [user])\n\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser')\n    if (loggedInUser)\n      setUser(JSON.parse(loggedInUser))\n  }, [])\n\n  return (\n    <div>\n      {/* Header of the page */}\n      <div className='text-center page-header p-2 regular-text-shadow regular-shadow'>\n          <div className='display-4 font-weight-bold'>\n            Academia - Payments\n          </div>\n      </div>\n      \n      {/* Notification component that will render only when the notification state is not null */}\n      <Notification notification={notification} type={notificationType} />\n\n      {\n        /* Show Login form when no login has happened */\n        user === null && \n        <LoginForm startLogin={handleLogin}/>\n      }\n\n      {\n        /* Show NavBar when login has happened */\n        user !== null && \n        <NavBar user={user} setUser={setUser}/>\n      } \n      \n      {\n        /* Show Bills of the User when login has happened */\n        // user !== null &&\n        // <Home\n        // />\n        <div className=\"App\">\n        <Router>\n          <Routes>           \n          user !== null && <Route exact path=\"/home\" element={<Home />} />\n            {/* <Route exact path=\"/adduser\" element={<AddUser />} />\n            <Route exact path=\"/edituser/:id\" element={<EditUser />} /> */}\n            <Route exact path=\"/viewuser/:id\" element={<ViewUser />} />    \n          </Routes>\n        </Router>\n      </div>\n        \n      }\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}